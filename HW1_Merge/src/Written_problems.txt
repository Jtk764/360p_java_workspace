UT-EID=
JTK764
RM48763

 
3)
======================================================================================================
======================================================================================================

jtknight

ramsesh2

4)
======================================================================================================
====================================================================================================== 

a)
Consider 

P1 implements petersons correctly, while P0 has modification

Process one request critical section, settung turn=0, then entering critical section because process 0 is not interested in the CS
Before Process one exits CS, Process 0 requests CS and sets turn=0. In this case Process 0 will enter CS and both processes are in the CS

b)
Consider the situation where P1 and P0 request CS. P1 implements petersons correctly, while P0 has modification.

P1 sets turn = 0 and gets to while after P0 has set turn = 1 but before P0 set wantsCS[0]=1

P1 sees that P0 has not set wantCS[0] so he enters the CS.

P0 sets wantsCS[0]=1, see its his turn and enters then CS

2 processes are in the CS







5)
======================================================================================================
======================================================================================================

Class PetersonAlgo2 implements Lock
Boolean wantCS[]={false,false};
int turn0, turn1 = 0

public void requestCS(int i){
	int j = 1-i;
	wantCS[i]=true;
	if ( i == 0){
		turn0=turn1+1;
		while (wantCS[j]==true && (turn0 > turn1) );
	}
	else {
		turn1=turn0+1
		while (wantCS[j]==true && (turn1 >= turn0) );
	}
}

public void releaseCS(int i){
	wantCS[i] = false;
	if ( i == 0) turn0=0;
		else turn1=0
		}
		
		
Mutex Proof:
assume 2 elements are in CS.

Case 1:
P1 enterd first then P2 request CS and gets access.
this is impossible because upon requesting CS p2 would have a number one larger than P1

Case 2: both enter at same time
In this case both processes would have the same number. It is still impossible for both to be in CS, because one process is blocked on having a number equal to the other process.

Deadlock:

Assume deadlock occured. This requires P1 > P2 and P2 >= P1 while both process want CS. The only two possible outcomes is that one process has a larger number or are equal. So this is a contradiction.

Fairness:

Assume one process repeatidly aquires CS while one process is waiting. This requires the rentrant process to recieve a value lower than the waiting process. A process sets its value when it request the section to one higher than the waiting process' number. So upon 2nd entry a process can not have a higher number than a waiting process becuase 1+n !< n, assuming no overflow.



6)
======================================================================================================
======================================================================================================

Assume there is no Choosing Array

Let there be two processes Pi and Pk, where i < k

Consider the event where Pk and Pi attempt to choose a number, and number[k]=number[i], and then K enters the critical section before I finishes choosing its number. 

If Pi now tries to enter the critical section, before Pk exits, it will find that (number[k] != 0) && (number[k]=number[i]) But not k < i, so you will have two process in the critical section
